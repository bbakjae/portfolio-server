// @fxts/core : 0.4.2
import {
  add,
  apply,
  average,
  mean,
  consume,
  countBy,
  curry,
  delay,
  each,
  every,
  evolve,
  find,
  findIndex,
  groupBy,
  head,
  first,
  identity,
  includes,
  contains,
  indexBy,
  isArray,
  isEmpty,
  isNil,
  isNumber,
  isObject,
  isString,
  join,
  juxt,
  last,
  max,
  min,
  noop,
  not,
  nth,
  omit,
  omitBy,
  partition,
  pick,
  pickBy,
  pipe,
  pipe1,
  reduce,
  size,
  some,
  sort,
  sortBy,
  sum,
  tap,
  toArray,
  fromEntries,
} from "@fxts/core";
import {
  append,
  chunk,
  compact,
  compress,
  concat,
  concurrent,
  cycle,
  difference,
  differenceBy,
  drop,
  dropUntil,
  dropWhile,
  entries,
  filter,
  flat,
  flatMap,
  intersection,
  intersectionBy,
  keys,
  map,
  peek,
  pluck,
  prepend,
  range,
  reject,
  repeat,
  reverse,
  scan,
  slice,
  split,
  take,
  takeUntil,
  takeWhile,
  toAsync,
  uniq,
  uniqBy,
  values,
  zip,
  zipWith,
  zipWithIndex,
} from "@fxts/core";
const L = {
  append,
  chunk,
  compact,
  compress,
  concat,
  concurrent,
  cycle,
  difference,
  differenceBy,
  drop,
  dropUntil,
  dropWhile,
  entries,
  filter,
  flat,
  flatMap,
  intersection,
  intersectionBy,
  keys,
  map,
  peek,
  pluck,
  prepend,
  range,
  reject,
  repeat,
  reverse,
  scan,
  slice,
  split,
  take,
  takeUntil,
  takeWhile,
  toAsync,
  uniq,
  uniqBy,
  values,
  zip,
  zipWith,
  zipWithIndex,
} as const;
const S = {
  fromEntries,
  add,
  apply,
  average,
  mean,
  consume,
  countBy,
  curry,
  delay,
  each,
  every,
  evolve,
  find,
  findIndex,
  groupBy,
  head,
  first,
  identity,
  includes,
  contains,
  indexBy,
  isArray,
  isEmpty,
  isNil,
  isNumber,
  isObject,
  isString,
  join,
  juxt,
  last,
  max,
  min,
  noop,
  not,
  nth,
  omit,
  omitBy,
  partition,
  pick,
  pickBy,
  pipe,
  pipe1,
  reduce,
  size,
  some,
  sort,
  sortBy,
  sum,
  tap,
  toArray,
} as const;

export { L, S };
